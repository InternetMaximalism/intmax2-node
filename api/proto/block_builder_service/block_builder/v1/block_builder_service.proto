syntax = "proto3";

package block_builder.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";

import "block_builder/v1/generic.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = ".;block_builder";

service BlockBuilderService {
  // HealthCheck returns the health check block builder info
  //
  // ## HealthCheck returns the health check block builder info
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get: "/v1"
    };
  }
  // Transaction sends the transaction to the block builder.
  //
  // This endpoint adds the transaction requested by the user to the tx tree.
  // - If successful, return a message to the user stating 'Transaction accepted and verified.'
  // - If the request is malformed, return BadRequest.
  // - If the transaction has already been accepted by the Block Builder, return BadRequest: 'Transaction must be unique.'
  // - If the correct PoW nonce value is not given, return a BadRequest.
  rpc Transaction(TransactionRequest) returns (TransactionResponse) {
    option (google.api.http) = {
      post: "/v1/transaction"
      body: "*"
    };
  }
  // BlockProposed returns the info about requests and retrieves the Merkle proof of a block containing the user's transaction, if available
  //
  // This endpoint returns the Merkle proof of a block containing the user's transaction, if available.
  // - If txHash is included in the leaf of the tx tree created by Block Builder, return the root of the tx tree and Merkle proof up to the leaf where the txHash resides.
  // - If the request is malformed, return BadRequest.
  // - If txHash is not included in the leaf of the tx tree, return NotFound.
  rpc BlockProposed(BlockProposedRequest) returns (BlockProposedResponse) {
    option (google.api.http) = {
      post: "/v1/block/proposed"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404"
        value: {
          description: "Not found error"
          schema: {
            json_schema: {
              ref: ".google.rpc.Status"
            }
          }
        }
      }
    };
  }
  // BlockSignature returns the info about sends the signature to approve the proposed block by signing the tx tree root
  //
  // This endpoint stores the signature passed by the user along with the transaction hash.
  // User sends the signature to approve the proposed block by signing the root hash of tx tree. 
  // - If the input txHash is not included in the leaf of the block builder's tx tree, return NotFound.
  rpc BlockSignature(BlockSignatureRequest) returns (BlockSignatureResponse) {
    option (google.api.http) = {
      post: "/v1/block/signature"
      body: "*"
    };
  }
  // BlockStatusByTxTreeRoot returns the info about retrieves the status of a block by its tx tree root
  //
  // When the user passes txTreeRoot, it checks whether the corresponding block has been posted.
  // If it has been posted, return the block number and block hash.
  rpc BlockStatusByTxTreeRoot(BlockStatusByTxTreeRootRequest) returns (BlockStatusByTxTreeRootResponse) {
    option (google.api.http) = {
      get: "/v1/block/status/{tx_tree_root}"
    };
  }
  // Info returns the info about the block builder's Scroll address, transaction fee, and difficulty
  //
  // This endpoint returns the info about the block builder's Scroll address, transaction fee, and difficulty
  rpc Info(InfoRequest) returns (InfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  }
}

// HealthCheckRequest describes request to get info about the health check block builder
message HealthCheckRequest {}

// HealthCheckResponse describes response to get info about the health check block builder
message HealthCheckResponse {
  // the success flag
  bool success = 1 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
}

// RecipientTransferDataTransactionRequest describes recipient of request to get info about the create new transaction
message RecipientTransferDataTransactionRequest {
  // the address type of recipient
  AddressType address_type = 10 [json_name="addressType", (tagger.tags)="json:\"addressType,omitempty\""];
  //  the address of recipient
  string      address = 20 [json_name="address", (tagger.tags)="json:\"address,omitempty\""];
}

// DEPRECATED: TransferDataTransactionRequest describes the data of transaction
message TransferDataTransactionRequest {
  // the recipient info
  RecipientTransferDataTransactionRequest recipient = 10 [json_name="recipient", (tagger.tags) = "json:\"recipient,omitempty\""];
  // the token index value
  string token_index = 20 [json_name="tokenIndex", (tagger.tags) = "json:\"tokenIndex,omitempty\""];
  // the amount value
  string amount = 30 [json_name="amount", (tagger.tags) = "json:\"amount,omitempty\""];
  // the salt value
  string salt = 40 [json_name="salt", (tagger.tags) = "json:\"salt,omitempty\""];
}

// TransactionRequest
//
// TransactionRequest describes request to get info about the create new transaction.
message TransactionRequest {
  // the sender's INTMAX address
  string sender = 10 [json_name="sender", (tagger.tags)="json:\"sender,omitempty\""];
  // the Poseidon hash of transfer tree root
  string transfers_hash = 20 [json_name="transfersHash", (tagger.tags)="json:\"transfersHash,omitempty\""];
  // the number of transactions executed with this public key
  uint64 nonce = 30 [json_name="nonce", (tagger.tags)="json:\"nonce,omitempty\""];
  // the PoW nonce
  string pow_nonce = 40 [json_name="powNonce", (tagger.tags)="json:\"powNonce,omitempty\""];
  // TransferDataTransactionRequest
  //
  // DEPRECATED: the transfer data of the transaction
  repeated TransferDataTransactionRequest transfer_data = 50 [json_name="transferData", (tagger.tags)="json:\"transferData,omitempty\""];
  // DEPRECATED: the expiration of request
  google.protobuf.Timestamp expiration = 70 [json_name="expiration", (tagger.tags)="json:\"expiration,omitempty\""];
  // the signature of request (the hash calculated from transfersHash, nonce, powNonce, and sender)
  string signature = 80 [json_name="signature", (tagger.tags)="json:\"signature,omitempty\""];
}

// BackupTransaction describes the backup data of transaction
message BackupTransactionData {
  // The transaction hash
  string tx_hash = 5 [json_name="txHash", (tagger.tags)="json:\"txHash,omitempty\""];
  // The encrypted transaction data
  string encrypted_tx = 10 [json_name="encryptedTx", (tagger.tags)="json:\"encryptedTx,omitempty\""];
  // The signature for the transaction
  string signature = 20 [json_name="signature", (tagger.tags)="json:\"signature,omitempty\""];
}

// BackupTransaction describes the backup data of transaction
message BackupTransferData {
  // The transfer hash
  string transfer_hash = 5 [json_name="transferHash", (tagger.tags)="json:\"transferHash,omitempty\""];
  // The encrypted data for the transfer
  string encrypted_transfer = 10 [json_name="encryptedTransfer", (tagger.tags)="json:\"encryptedTransfer,omitempty\""];
  // The recipient address
  string recipient = 20 [json_name="recipient", (tagger.tags)="json:\"recipient,omitempty\""];
}

// DataTransactionResponse describes the data of response to get info about the create new transaction
message DataTransactionResponse {
  // the message about result of request
  string message = 10 [json_name="message", (tagger.tags)="json:\"message,omitempty\""];
}

// TransactionResponse describes response to get info about the create new transaction
message TransactionResponse {
  // the success flag
  bool success = 1 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // the info about the request's result
  DataTransactionResponse data = 10 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
}

// BlockProposedRequest describes request about retrieves the Merkle proof of a block containing the user's transaction, if available
message BlockProposedRequest {
  // the sender's INTMAX address
  string sender = 10 [json_name="sender", (tagger.tags)="json:\"sender,omitempty\""];
  // the hash of the user's transaction
  string tx_hash = 20 [json_name="txHash", (tagger.tags)="json:\"txHash,omitempty\""];
  // DEPRECATED: the expiration of request
  google.protobuf.Timestamp expiration = 70 [json_name="expiration", (tagger.tags)="json:\"expiration,omitempty\""];
  // the signature of request (the hash calculated from txHash, sender)
  string signature = 80 [json_name="signature", (tagger.tags)="json:\"signature,omitempty\""];
}

// DataBlockProposedResponse describes the data of response about retrieves the Merkle proof of a block containing the user's transaction, if available
message DataBlockProposedResponse {
  // the transaction tree root hash
  string tx_root = 10 [json_name="txRoot", (tagger.tags)="json:\"txRoot,omitempty\""];
  // the Merkle proof from the tx tree for the specified tx_hash
  repeated string tx_tree_merkle_proof = 20 [json_name="txTreeMerkleProof", (tagger.tags)="json:\"txTreeMerkleProof,omitempty\""];

  repeated string public_keys = 30 [json_name="publicKeys", (tagger.tags)="json:\"publicKeys,omitempty\""];
}

// BlockProposedResponse describes response about retrieves the Merkle proof of a block containing the user's transaction, if available
message BlockProposedResponse {
  // the success flag
  bool success = 1 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // the info about the request's result
  DataBlockProposedResponse data = 10 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
}

// EnoughBalanceOfProofBlockSignatureRequest describes the proof of sufficient balance after sending for BlockSignatureRequest
message EnoughBalanceOfProofBlockSignatureRequest {
  // the previous balance proof value
  string prev_balance_proof = 10 [json_name="prevBalanceProof", (tagger.tags)="json:\"prevBalanceProof,omitempty\""];
  // the transfer step proof value
  string transfer_step_proof = 20 [json_name="transferStepProof", (tagger.tags)="json:\"transferStepProof,omitempty\""];
}

// BlockSignatureRequest describes request about sends the signature to approve the proposed block by signing the tx tree root
message BlockSignatureRequest {
  // the sender's INTMAX address
  string sender = 10 [json_name="sender", (tagger.tags)="json:\"sender,omitempty\""];
  // the transaction tree root hash
  string tx_hash = 20 [json_name="txHash", (tagger.tags)="json:\"txHash,omitempty\""];
  // the user's signature
  string signature = 30 [json_name="signature", (tagger.tags)="json:\"signature,omitempty\""];
  // the proof of sufficient balance after sending
  EnoughBalanceOfProofBlockSignatureRequest enough_balance_proof = 40 [json_name="enoughBalanceProof", (tagger.tags)="json:\"enoughBalanceProof,omitempty\""];
  // The encrypted transaction data
  BackupTransactionData backup_transaction = 50 [json_name="backupTx", (tagger.tags)="json:\"backupTx,omitempty\""];
  // The encrypted transfer data
  repeated BackupTransferData backup_transfers = 60 [json_name="backupTransfers", (tagger.tags)="json:\"backupTransfers,omitempty\""];
}

// DataBlockSignatureResponse describes the data of response about sends the signature to approve the proposed block by signing the tx tree root
message DataBlockSignatureResponse {
  // the message about result of request
  string message = 10 [json_name="message", (tagger.tags)="json:\"message,omitempty\""];
}

// BlockSignatureResponse describes response about sends the signature to approve the proposed block by signing the tx tree root
message BlockSignatureResponse {
  // the success flag
  bool success = 1 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // the info about the request's result
  DataBlockSignatureResponse data = 10 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
}

// BlockStatusByTxTreeRootRequest
//
// BlockStatusByTxTreeRootRequest describes request about retrieves the status of a block by its tx tree root
message BlockStatusByTxTreeRootRequest {
  // the transaction tree root hash
  string tx_tree_root = 10 [json_name="txTreeRoot", (tagger.tags)="json:\"txTreeRoot,omitempty\""];
}

// BlockStatusByTxTreeRootResponse
//
// BlockStatusByTxTreeRootResponse describes response about retrieves the status of a block by its tx tree root
message BlockStatusByTxTreeRootResponse {
  // the flag indicated whether the block is posted
  bool is_posted = 10 [json_name="isPosted", (tagger.tags)="json:\"isPosted,omitempty\""];

  // the block number
  uint64 block_number = 20 [json_name="blockNumber", (tagger.tags)="json:\"blockNumber,omitempty\""];
}

// InfoRequest describes request about retrieves the block builder's Scroll address, transaction fee, and difficulty
message InfoRequest {}

// DataInfoResponse describes the data of response about retrieves the block builder's Scroll address, transaction fee, and difficulty
message DataInfoResponse {
  // the block builder's Scroll address
  string scroll_address = 10 [json_name="scrollAddress", (tagger.tags)="json:\"scrollAddress,omitempty\""];
  // the block builder's IntMax address
  string int_max_address = 20 [json_name="intMaxAddress", (tagger.tags)="json:\"intMaxAddress,omitempty\""];
  // the mapping of token addresses in INTMAX to fees payable in those tokens
  map<string,string> transfer_fee = 30 [json_name="transferFee", (tagger.tags)="json:\"transferFee,omitempty\""];
  // the PoW difficulty value
  uint32 difficulty = 40 [json_name="difficulty", (tagger.tags)="json:\"difficulty,omitempty\""];
}

// InfoResponse describes response about retrieves the block builder's Scroll address, transaction fee, and difficulty
message InfoResponse {
  // the success flag
  bool success = 1 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // the info about the request's result
  DataInfoResponse data = 10 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
}
