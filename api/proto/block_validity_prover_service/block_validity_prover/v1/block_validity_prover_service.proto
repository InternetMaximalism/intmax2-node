syntax = "proto3";

package block_validity_prover.v1;

import "google/api/annotations.proto";
import "tagger/tagger.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = ".;block_validity_prover";

service BlockValidityProverService {
  // DepositTreeProof returns the deposit Merkle proof
  //
  // ## DepositTreeProof returns the deposit Merkle proof
  rpc DepositTreeProof(DepositTreeProofRequest) returns (DepositTreeProofResponse) {
    option (google.api.http) = {
      get: "/v1/deposit-tree-proof/{deposit_index}"
    };
  }
  // BlockTreeProof returns the block Merkle proof
  //
  // ## BlockTreeProof returns the block Merkle proof
  rpc BlockTreeProof(BlockTreeProofRequest) returns (BlockTreeProofResponse) {
    option (google.api.http) = {
      get: "/v1/block-merkle-tree/{root_block_number}/{leaf_block_number}"
    };
  }
  // BlockValidityProverInfo returns info of the block validity prover
  //
  // ## BlockValidityProverInfo returns info of the block validity prover
  rpc BlockValidityProverInfo(BlockValidityProverInfoRequest) returns (BlockValidityProverInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  }
}

// DepositTreeProofRequest describes request to get info about the deposit Merkle proof
message DepositTreeProofRequest {
  // the deposit index of deposit
  int64 deposit_index = 10 [json_name="depositIndex", (tagger.tags)="json:\"depositIndex,omitempty\""];
}

// DepositTreeProofResponse describes response to get info about the deposit Merkle proof
message DepositTreeProofResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the merkle proof of deposit
    MerkleProof merkle_proof = 10 [json_name="merkleProof", (tagger.tags)="json:\"merkleProof,omitempty\""];
    // the root hash of deposit
    string root_hash = 20 [json_name="rootHash", (tagger.tags)="json:\"rootHash,omitempty\""];
  }
  // MerkleProof is the deposit merkle proof
  message MerkleProof {
    // the siblings of the deposit merkle proof
    repeated string siblings = 10 [json_name="siblings", (tagger.tags)="json:\"siblings,omitempty\""];
  }
}

// BlockTreeProofRequest describes request to get info about the block Merkle proof
message BlockTreeProofRequest {
  // the root block number of the block Merkle proof
  int64 root_block_number = 10 [json_name="rootBlockNumber", (tagger.tags)="json:\"rootBlockNumber,omitempty\""];
  // the leaf block number of the block Merkle proof
  int64 leaf_block_number = 20 [json_name="leafBlockNumber", (tagger.tags)="json:\"leafBlockNumber,omitempty\""];
}

// BlockTreeProofResponse describes response to get info about the block Merkle proof
message BlockTreeProofResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the merkle proof of block
    MerkleProof merkle_proof = 10 [json_name="merkleProof", (tagger.tags)="json:\"merkleProof,omitempty\""];
    // the root hash of block
    string root_hash = 20 [json_name="rootHash", (tagger.tags)="json:\"rootHash,omitempty\""];
  }
  // MerkleProof is the block merkle proof
  message MerkleProof {
    // the siblings of the block merkle proof
    repeated string siblings = 10 [json_name="siblings", (tagger.tags)="json:\"siblings,omitempty\""];
  }
}

// BlockValidityProverInfoRequest describes request to get info about the block validity prover
message BlockValidityProverInfoRequest {}

// BlockValidityProverInfoResponse describes response to get info about the block validity prover
message BlockValidityProverInfoResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the last synchronized deposit index of the block validity prover
    int64 deposit_index = 10 [json_name="depositIndex", (tagger.tags)="json:\"depositIndex,omitempty\""];
    // the latest block number for which block validity proof has been created
    int64 block_number = 20 [json_name="blockNumber", (tagger.tags)="json:\"rootHash,omitempty\""];
  }
}