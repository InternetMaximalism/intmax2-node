syntax = "proto3";

package block_validity_prover.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "google/rpc/status.proto";

import "block_validity_prover/v1/generic.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = ".;block_validity_prover";

service BlockValidityProverService {
  // DepositTreeProof returns the deposit Merkle proof
  //
  // ## DepositTreeProof returns the deposit Merkle proof
  rpc DepositTreeProof(DepositTreeProofRequest) returns (DepositTreeProofResponse) {
    option (google.api.http) = {
      get: "/v1/deposit-tree-proof/{deposit_index}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404"
        value: {
          description: "Not found error"
          schema: {
            json_schema: {
              ref: ".google.rpc.Status"
            }
          }
        }
      }
    };
  }
  // BlockTreeProof returns the block Merkle proof
  //
  // ## BlockTreeProof returns the block Merkle proof
  rpc BlockTreeProof(BlockTreeProofRequest) returns (BlockTreeProofResponse) {
    option (google.api.http) = {
      get: "/v1/block-merkle-tree/{root_block_number}/{leaf_block_number}"
    };
  }
  // BlockValidityProverInfo returns info of the block validity prover
  //
  // ## BlockValidityProverInfo returns info of the block validity prover
  rpc BlockValidityProverInfo(BlockValidityProverInfoRequest) returns (BlockValidityProverInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  }
  // BlockHashStatus returns status by the block hash
  //
  // ## BlockHashStatus returns status by the block hash
  rpc BlockHashStatus(BlockHashStatusRequest) returns (BlockHashStatusResponse) {
    option (google.api.http) = {
      get: "/v1/block-hash/{block_hash}/status"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404"
        value: {
          description: "Not found error"
          schema: {
            json_schema: {
              ref: ".google.rpc.Status"
            }
          }
        }
      }
    };
  }
  // BlockNumberStatus returns status by the block number
  //
  // ## BlockNumberStatus returns status by the block number
  rpc BlockNumberStatus(BlockNumberStatusRequest) returns (BlockNumberStatusResponse) {
    option (google.api.http) = {
      get: "/v1/block-number/{block_number}/status"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404"
        value: {
          description: "Not found error"
          schema: {
            json_schema: {
              ref: ".google.rpc.Status"
            }
          }
        }
      }
    };
  }
  // Account returns info of account ID by sender INTMAX address
  //
  // ## Account returns info of account ID by sender INTMAX address
  rpc Account(AccountRequest) returns (AccountResponse) {
    option (google.api.http) = {
      get: "/v1/account/{address}"
    };
  }
  // BalanceUpdateWitness returns info of data to update balance proof to specified block number
  //
  // ## BalanceUpdateWitness returns info of data to update balance proof to specified block number
  rpc BalanceUpdateWitness(BalanceUpdateWitnessRequest) returns (BalanceUpdateWitnessResponse) {
    option (google.api.http) = {
      post: "/v1/balance-update-witness"
      body: "*"
    };
  }
  // BlockValidityPublicInputs returns info of data with block validity public inputs
  //
  // ## BlockValidityPublicInputs returns info of data with block validity public inputs
  rpc BlockValidityPublicInputs(BlockValidityPublicInputsRequest) returns (BlockValidityPublicInputsResponse) {
    option (google.api.http) = {
      get: "/v1/block-validity-public-inputs/{block_number}"
    };
  }
  // BlockValidityProof returns info of data with block validity proof
  //
  // ## BlockValidityPublicInputs returns info of data with block validity proof
  rpc BlockValidityProof(BlockValidityProofRequest) returns (BlockValidityProofResponse) {
    option (google.api.http) = {
      get: "/v1/block-validity-proof/{block_number}"
    };
  }
}

// DepositTreeProofRequest describes request to get info about the deposit Merkle proof
message DepositTreeProofRequest {
  // the deposit index of deposit
  int64 deposit_index = 10 [json_name="depositIndex", (tagger.tags)="json:\"depositIndex,omitempty\""];
  // the block number of deposit
  int64 block_number = 20 [json_name="blockNumber", (tagger.tags)="json:\"blockNumber,omitempty\""];
}

// DepositTreeProofResponse describes response to get info about the deposit Merkle proof
message DepositTreeProofResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the merkle proof of deposit
    MerkleProof merkle_proof = 10 [json_name="merkleProof", (tagger.tags)="json:\"merkleProof,omitempty\""];
    // the root hash of deposit
    string root_hash = 20 [json_name="rootHash", (tagger.tags)="json:\"rootHash,omitempty\""];
  }
  // MerkleProof is the deposit merkle proof
  message MerkleProof {
    // the siblings of the deposit merkle proof
    repeated string siblings = 10 [json_name="siblings", (tagger.tags)="json:\"siblings,omitempty\""];
  }
}

// BlockTreeProofRequest describes request to get info about the block Merkle proof
message BlockTreeProofRequest {
  // the root block number of the block Merkle proof
  int64 root_block_number = 10 [json_name="rootBlockNumber", (tagger.tags)="json:\"rootBlockNumber,omitempty\""];
  // the leaf block number of the block Merkle proof
  int64 leaf_block_number = 20 [json_name="leafBlockNumber", (tagger.tags)="json:\"leafBlockNumber,omitempty\""];
}

// BlockTreeProofResponse describes response to get info about the block Merkle proof
message BlockTreeProofResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the merkle proof of block
    MerkleProof merkle_proof = 10 [json_name="merkleProof", (tagger.tags)="json:\"merkleProof,omitempty\""];
    // the root hash of block
    string root_hash = 20 [json_name="rootHash", (tagger.tags)="json:\"rootHash,omitempty\""];
  }
  // MerkleProof is the block merkle proof
  message MerkleProof {
    // the siblings of the block merkle proof
    repeated string siblings = 10 [json_name="siblings", (tagger.tags)="json:\"siblings,omitempty\""];
  }
}

// BlockValidityProverInfoRequest describes request to get info about the block validity prover
message BlockValidityProverInfoRequest {}

// BlockValidityProverInfoResponse describes response to get info about the block validity prover
message BlockValidityProverInfoResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the last synchronized deposit index of the block validity prover
    int64 deposit_index = 10 [json_name="depositIndex", (tagger.tags)="json:\"depositIndex,omitempty\""];
    // the latest block number for which block validity proof has been created
    int64 block_number = 20 [json_name="blockNumber", (tagger.tags)="json:\"blockNumber,omitempty\""];
  }
}

// BlockHashStatusRequest describes request to get status by the block hash
message BlockHashStatusRequest {
  // the hash of block
  string block_hash = 10 [json_name="blockHash", (tagger.tags)="json:\"blockHash,omitempty\""];
}

// BlockHashStatusResponse describes response to get status by the block hash
message BlockHashStatusResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the INTMAX Block number
    uint32 block_number = 10 [json_name="blockNumber", (tagger.tags)="json:\"blockNumber,omitempty\""];
    // the INTMAX Block hash
    string block_hash = 20 [json_name="blockHash", (tagger.tags)="json:\"blockHash,omitempty\""];
    // the status of block
    BlockStatus status = 30 [json_name="status", (tagger.tags)="json:\"status,omitempty\""];
    // the block hash posted on Scroll
    string executed_block_hash_on_scroll = 40 [json_name="executedBlockHashOnScroll", (tagger.tags)="json:\"executedBlockHashOnScroll,omitempty\""];
    // the block hash of the Scroll block posted on Ethereum
    string executed_block_hash_on_ethereum = 50 [json_name="executedBlockHashOnEthereum", (tagger.tags)="json:\"executedBlockHashOnEthereum,omitempty\""];
  }
}

// BlockNumberStatusRequest describes request to get status by the block number
message BlockNumberStatusRequest {
  // the number of block
  uint64 block_number = 10 [json_name="blockNumber", (tagger.tags)="json:\"blockNumber,omitempty\""];
}

// BlockNumberStatusResponse describes response to get status by the block number
message BlockNumberStatusResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the INTMAX Block number
    uint32 block_number = 10 [json_name="blockNumber", (tagger.tags)="json:\"blockNumber,omitempty\""];
    // the INTMAX Block hash
    string block_hash = 20 [json_name="blockHash", (tagger.tags)="json:\"blockHash,omitempty\""];
    // the status of block
    BlockStatus status = 30 [json_name="status", (tagger.tags)="json:\"status,omitempty\""];
    // the block hash posted on Scroll
    string executed_block_hash_on_scroll = 40 [json_name="executedBlockHashOnScroll", (tagger.tags)="json:\"executedBlockHashOnScroll,omitempty\""];
    // the block hash of the Scroll block posted on Ethereum
    string executed_block_hash_on_ethereum = 50 [json_name="executedBlockHashOnEthereum", (tagger.tags)="json:\"executedBlockHashOnEthereum,omitempty\""];
  }
}

// AccountRequest describes request to get info about the account ID by sender INTMAX address
message AccountRequest {
  // the INTMAX address
  string address = 10 [json_name="address", (tagger.tags)="json:\"address,omitempty\""];
}

// AccountResponse describes response to get info about the account ID by sender INTMAX address
message AccountResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the indication if the address is registered or not
    bool is_registered = 10 [json_name="isRegistered", (tagger.tags)="json:\"isRegistered,omitempty\""];
    // the account ID. If isRegistered is false, accountId is always zero
    uint32 account_id = 20 [json_name="accountId", (tagger.tags)="json:\"accountId,omitempty\""];
  }
}

// BalanceUpdateWitnessRequest describes request to get info about the data to update balance proof to specified block number
message BalanceUpdateWitnessRequest {
  // the INTMAX address
  string user = 10 [json_name="user", (tagger.tags)="json:\"user,omitempty\""];
  // the block number of the current balance proof
  uint32 current_block_number = 20 [json_name="currentBlockNumber", (tagger.tags)="json:\"currentBlockNumber,omitempty\""];
  // the block number to which the balance proof should be updated
  uint32 target_block_number = 30 [json_name="targetBlockNumber", (tagger.tags)="json:\"targetBlockNumber,omitempty\""];
  // indicates whether to use the previous account tree
  bool is_prev_account_tree = 40 [json_name="isPrevAccountTree", (tagger.tags)="json:\"isPrevAccountTree,omitempty\""];
}

// BalanceUpdateWitnessResponse describes response to get info about the data to update balance proof to specified block number
message BalanceUpdateWitnessResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // indicates whether to use the previous account tree
    bool is_prev_account_tree = 10 [json_name="isPrevAccountTree", (tagger.tags)="json:\"isPrevAccountTree,omitempty\""];
    // the base64-encoded validity proof data
    string validity_proof = 20 [json_name="validityProof", (tagger.tags)="json:\"validityProof,omitempty\""];
    // the siblings of the block Merkle proof
    repeated string block_merkle_proof = 30 [json_name="blockMerkleProof", (tagger.tags)="json:\"blockMerkleProof,omitempty\""];
    // the proof of account membership
    AccountMembershipProof account_membership_proof = 40 [json_name="accountMembershipProof", (tagger.tags)="json:\"accountMembershipProof,omitempty\""];
  }

  // Proof of account membership
  message AccountMembershipProof {
    // indicates if the account is included in the tree
    bool is_included = 10 [json_name="isIncluded", (tagger.tags)="json:\"isIncluded,omitempty\""];
    // the siblings of account Merkle proof
    repeated string leaf_proof = 20 [json_name="leafProof", (tagger.tags)="json:\"leafProof,omitempty\""];
    // the leaf data
    Leaf leaf = 30 [json_name="leaf", (tagger.tags)="json:\"leaf,omitempty\""];
  }

  // Leaf data
  message Leaf {
    // the key of the leaf
    string key = 10 [json_name="key", (tagger.tags)="json:\"key,omitempty\""];
    // the value associated with the leaf
    uint32 value = 20 [json_name="value", (tagger.tags)="json:\"value,omitempty\""];
    // the index of the next leaf
    uint32 next_index = 30 [json_name="nextIndex", (tagger.tags)="json:\"nextIndex,omitempty\""];
    // the key of the next leaf
    string next_key = 40 [json_name="nextKey", (tagger.tags)="json:\"nextKey,omitempty\""];
  }
}

// BlockValidityPublicInputsRequest describes request to get info about the data with block validity public inputs
message BlockValidityPublicInputsRequest {
  // the target block number
  uint32 block_number = 10 [json_name="blockNumber", (tagger.tags)="json:\"blockNumber,omitempty\""];
}

// BlockValidityPublicInputsResponse describes response to get info about the data with block validity public inputs
message BlockValidityPublicInputsResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the object contains details about the public inputs for block validity verification
    ValidityPublicInputs validity_public_inputs = 10 [json_name="validityPublicInputs", (tagger.tags)="json:\"validityPublicInputs,omitempty\""];
    // the object contains information about each sender in the block, including their address and validity status
    repeated Sender senders = 20 [json_name="senders", (tagger.tags)="json:\"senders,omitempty\""];

    // ValidityPublicInputs returns object contains details about the public inputs for block validity verification
    message ValidityPublicInputs {
      // the object includes various root hashes and block information
      PublicState public_state = 10 [json_name="publicState", (tagger.tags)="json:\"publicState,omitempty\""];
      // the merkle root of the transaction tree
      string tx_tree_root = 20 [json_name="txTreeRoot", (tagger.tags)="json:\"txTreeRoot,omitempty\""];
      // the merkle root of the sender tree
      string sender_tree_root = 30 [json_name="senderTreeRoot", (tagger.tags)="json:\"senderTreeRoot,omitempty\""];
      // the boolean indicating if the block is valid
      bool is_valid_block = 40 [json_name="isValidBlock", (tagger.tags)="json:\"isValidBlock,omitempty\""];
    }

    // PublicState return object includes various root hashes and block information
    message PublicState {
      // the merkle root of the block tree
      string block_tree_root = 10 [json_name="blockTreeRoot", (tagger.tags)="json:\"blockTreeRoot,omitempty\""];
      // the merkle root of the previous account state tree
      string prev_account_tree_root = 20 [json_name="prevAccountTreeRoot", (tagger.tags)="json:\"prevAccountTreeRoot,omitempty\""];
      // the merkle root of the current account state tree
      string account_tree_root = 30 [json_name="accountTreeRoot", (tagger.tags)="json:\"accountTreeRoot,omitempty\""];
      // the merkle root of the deposit tree
      string deposit_tree_root = 40 [json_name="depositTreeRoot", (tagger.tags)="json:\"depositTreeRoot,omitempty\""];
      // the hash of the current block
      string block_hash = 50 [json_name="blockHash", (tagger.tags)="json:\"blockHash,omitempty\""];
      // the number of the current block
      uint32 block_number = 60 [json_name="blockNumber", (tagger.tags)="json:\"blockNumber,omitempty\""];
    }

    // Sender returns object contains information about sender in the block, including address and validity status
    message Sender {
      // the INTMAX address of the sender
      string public_key = 10 [json_name="publicKey", (tagger.tags)="json:\"publicKey,omitempty\""];
      // the boolean indicating if the sender's transaction is valid (the sender signed the tx root and the balance is non-negative)
      bool is_valid = 20 [json_name="isValid", (tagger.tags)="json:\"isValid,omitempty\""];
    }
  }
}

// BlockValidityProofRequest describes request to get info about the data with block validity proof
message BlockValidityProofRequest {
  // the target block number
  uint32 block_number = 10 [json_name="blockNumber", (tagger.tags)="json:\"blockNumber,omitempty\""];
}

// BlockValidityProofResponse describes response to get info about the data with block validity proof
message BlockValidityProofResponse {
  // the success flag
  bool success = 10 [json_name="success", (tagger.tags)="json:\"success,omitempty\""];
  // Additional data related to the response
  Data data = 20 [json_name="data", (tagger.tags)="json:\"data,omitempty\""];
  // Data is the nested message containing detailed response information
  message Data {
    // the object contains details about the public inputs for block validity verification
    ValidityPublicInputs validity_public_inputs = 10 [json_name="validityPublicInputs", (tagger.tags)="json:\"validityPublicInputs,omitempty\""];
    // the Plonky2 proof encoded in base64 including public inputs
    string validity_proof = 20 [json_name="validityProof", (tagger.tags)="json:\"validityProof,omitempty\""];
    // the object contains information about each sender in the block, including their address and validity status
    repeated Sender senders = 30 [json_name="senders", (tagger.tags)="json:\"senders,omitempty\""];

    // ValidityPublicInputs returns object contains details about the public inputs for block validity verification
    message ValidityPublicInputs {
      // the object includes various root hashes and block information
      PublicState public_state = 10 [json_name="publicState", (tagger.tags)="json:\"publicState,omitempty\""];
      // the merkle root of the transaction tree
      string tx_tree_root = 20 [json_name="txTreeRoot", (tagger.tags)="json:\"txTreeRoot,omitempty\""];
      // the merkle root of the sender tree
      string sender_tree_root = 30 [json_name="senderTreeRoot", (tagger.tags)="json:\"senderTreeRoot,omitempty\""];
      // the boolean indicating if the block is valid
      bool is_valid_block = 40 [json_name="isValidBlock", (tagger.tags)="json:\"isValidBlock,omitempty\""];
    }

    // PublicState return object includes various root hashes and block information
    message PublicState {
      // the merkle root of the block tree
      string block_tree_root = 10 [json_name="blockTreeRoot", (tagger.tags)="json:\"blockTreeRoot,omitempty\""];
      // the merkle root of the previous account state tree
      string prev_account_tree_root = 20 [json_name="prevAccountTreeRoot", (tagger.tags)="json:\"prevAccountTreeRoot,omitempty\""];
      // the merkle root of the current account state tree
      string account_tree_root = 30 [json_name="accountTreeRoot", (tagger.tags)="json:\"accountTreeRoot,omitempty\""];
      // the merkle root of the deposit tree
      string deposit_tree_root = 40 [json_name="depositTreeRoot", (tagger.tags)="json:\"depositTreeRoot,omitempty\""];
      // the hash of the current block
      string block_hash = 50 [json_name="blockHash", (tagger.tags)="json:\"blockHash,omitempty\""];
      // the number of the current block
      uint32 block_number = 60 [json_name="blockNumber", (tagger.tags)="json:\"blockNumber,omitempty\""];
    }

    // Sender returns object contains information about sender in the block, including address and validity status
    message Sender {
      // the INTMAX address of the sender
      string public_key = 10 [json_name="publicKey", (tagger.tags)="json:\"publicKey,omitempty\""];
      // the boolean indicating if the sender's transaction is valid (the sender signed the tx root and the balance is non-negative)
      bool is_valid = 20 [json_name="isValid", (tagger.tags)="json:\"isValid,omitempty\""];
    }
  }
}