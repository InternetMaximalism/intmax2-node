linters-settings:
  dupl:
    threshold: 350
  exhaustive:
    check-generated: false
    default-signifies-exhaustive: false
  funlen:
    lines: 500
    statements: 200
  gci:
    sections:
      # Standard section: captures all standard packages.
      - standard
      # Default section: contains all imports that could not be matched to another section type.
      - default
      # Custom section: groups all imports with the specified Prefix.
      - prefix(github.com/golangci/golangci-lint)
      # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      - blank
      # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
      - dot
      # Alias section: contains all alias imports. This section is not present unless explicitly enabled.
      - alias
    skip-generated: false
    custom-order: true
  goconst:
    min-len: 2
    min-occurrences: 2
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
  gocyclo:
    min-complexity: 30
  goimports:
    local-prefixes: github.com/golangci/golangci-lint
  revive:
    # see https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: true
    severity: warning
    confidence: 0
    rules:
      - name: indent-error-flow
        severity: warning
      - name: add-constant
        severity: warning
        arguments:
          - maxLitCount: "3"
            allowStrs: '""'
            allowInts: "0,1,2"
            allowFloats: "0.0,0.,1.0,1.,2.0,2."
  mnd:
    # don't include the "operation" and "assign"
    checks:
      - argument
      - case
      - condition
      - return
  govet:
    disable-all: true
    enable:
      - appends
      - asmdecl
      - assign
      - atomic
      - atomicalign
      - bools
      - buildtag
      - cgocall
      - composites
      - copylocks
      - deepequalerrors
      - defers
      - directive
      - errorsas
      - findcall
      - framepointer
      - httpresponse
      - ifaceassert
      - loopclosure
      - lostcancel
      - nilfunc
      - nilness
      - printf
      - reflectvaluecompare
      - shadow
      - shift
      - sigchanyzer
      - slog
      - sortslice
      - stdmethods
      - stringintconv
      - structtag
      - testinggoroutine
      - tests
      - unmarshal
      - unreachable
      - unsafeptr
      - unusedresult
      - unusedwrite


    # Settings per analyzer.
    settings:
      # Analyzer name, run `go tool vet help` to see all analyzers.
      printf:
        # Comma-separated list of print function names to check (in addition to default, see `go tool vet help printf`).
        # Default: []
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true

#    check-shadowing: true
  lll:
    line-length: 200
    tab-width: 4
  maligned:
    suggest-new: true
  misspell:
    locale: US
  nolintlint:
    allow-leading-space: true # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: false # don't require nolint directives to be specific about which linter is being skipped
  stylecheck:
    # https://staticcheck.io/docs/options#checks
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022", "-ST1001"]
    dot-import-whitelist:
      - handler
linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - bodyclose
    - dupl
    - errcheck
    - funlen
    - gochecknoinits
    - goconst
    - gocritic
    - gocyclo
    - gofmt
    - goimports
    - revive
    - mnd
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - misspell
    - nakedret
    - exportloopref
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - whitespace

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - path: internal/bindings
      linters:
        - govet
        - mnd
        - bodyclose
        - dupl
        - lll
        - funlen
        - scopelint
        - goconst
        - revive
        - gosec
        - errcheck
        - gocyclo
        - nakedret
        - gocritic
    - path: '(.+)_test\.go'
      linters:
        - govet
        - mnd
        - bodyclose
        - dupl
        - lll
        - funlen
        - scopelint
        - goconst
        - revive
        - gosec
        - errcheck
        - gocyclo
        - nakedret
        - gocritic
    # Exclude `lll` issues for long lines with `go:generate`.
    - linters:
        - lll
      source: "^//go:generate "
    - path: internal/sql_db/pgx
      linters:
        - revive
        - dupl