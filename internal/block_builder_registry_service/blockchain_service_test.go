// Code generated by MockGen. DO NOT EDIT.
// Source: blockchain_service.go
//
// Generated by this command:
//
//	mockgen -destination=blockchain_service_test.go -package=block_builder_registry_service_test -source=blockchain_service.go
//

// Package block_builder_registry_service_test is a generated GoMock package.
package block_builder_registry_service_test

import (
	context "context"
	reflect "reflect"

	health "github.com/dimiro1/health"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceBlockchain is a mock of ServiceBlockchain interface.
type MockServiceBlockchain struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBlockchainMockRecorder
}

// MockServiceBlockchainMockRecorder is the mock recorder for MockServiceBlockchain.
type MockServiceBlockchainMockRecorder struct {
	mock *MockServiceBlockchain
}

// NewMockServiceBlockchain creates a new mock instance.
func NewMockServiceBlockchain(ctrl *gomock.Controller) *MockServiceBlockchain {
	mock := &MockServiceBlockchain{ctrl: ctrl}
	mock.recorder = &MockServiceBlockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBlockchain) EXPECT() *MockServiceBlockchainMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockServiceBlockchain) Check(ctx context.Context) health.Health {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx)
	ret0, _ := ret[0].(health.Health)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockServiceBlockchainMockRecorder) Check(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockServiceBlockchain)(nil).Check), ctx)
}

// CheckScrollPrivateKey mocks base method.
func (m *MockServiceBlockchain) CheckScrollPrivateKey(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckScrollPrivateKey", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckScrollPrivateKey indicates an expected call of CheckScrollPrivateKey.
func (mr *MockServiceBlockchainMockRecorder) CheckScrollPrivateKey(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckScrollPrivateKey", reflect.TypeOf((*MockServiceBlockchain)(nil).CheckScrollPrivateKey), ctx)
}

// ScrollNetworkChainLinkEvmJSONRPC mocks base method.
func (m *MockServiceBlockchain) ScrollNetworkChainLinkEvmJSONRPC(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrollNetworkChainLinkEvmJSONRPC", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrollNetworkChainLinkEvmJSONRPC indicates an expected call of ScrollNetworkChainLinkEvmJSONRPC.
func (mr *MockServiceBlockchainMockRecorder) ScrollNetworkChainLinkEvmJSONRPC(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrollNetworkChainLinkEvmJSONRPC", reflect.TypeOf((*MockServiceBlockchain)(nil).ScrollNetworkChainLinkEvmJSONRPC), ctx)
}

// SetupScrollNetworkChainID mocks base method.
func (m *MockServiceBlockchain) SetupScrollNetworkChainID(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupScrollNetworkChainID", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupScrollNetworkChainID indicates an expected call of SetupScrollNetworkChainID.
func (mr *MockServiceBlockchainMockRecorder) SetupScrollNetworkChainID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupScrollNetworkChainID", reflect.TypeOf((*MockServiceBlockchain)(nil).SetupScrollNetworkChainID), ctx)
}

// MockGenericCommandsSB is a mock of GenericCommandsSB interface.
type MockGenericCommandsSB struct {
	ctrl     *gomock.Controller
	recorder *MockGenericCommandsSBMockRecorder
}

// MockGenericCommandsSBMockRecorder is the mock recorder for MockGenericCommandsSB.
type MockGenericCommandsSBMockRecorder struct {
	mock *MockGenericCommandsSB
}

// NewMockGenericCommandsSB creates a new mock instance.
func NewMockGenericCommandsSB(ctrl *gomock.Controller) *MockGenericCommandsSB {
	mock := &MockGenericCommandsSB{ctrl: ctrl}
	mock.recorder = &MockGenericCommandsSBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericCommandsSB) EXPECT() *MockGenericCommandsSBMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockGenericCommandsSB) Check(ctx context.Context) health.Health {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx)
	ret0, _ := ret[0].(health.Health)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockGenericCommandsSBMockRecorder) Check(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockGenericCommandsSB)(nil).Check), ctx)
}

// CheckScrollPrivateKey mocks base method.
func (m *MockGenericCommandsSB) CheckScrollPrivateKey(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckScrollPrivateKey", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckScrollPrivateKey indicates an expected call of CheckScrollPrivateKey.
func (mr *MockGenericCommandsSBMockRecorder) CheckScrollPrivateKey(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckScrollPrivateKey", reflect.TypeOf((*MockGenericCommandsSB)(nil).CheckScrollPrivateKey), ctx)
}

// MockChainSB is a mock of ChainSB interface.
type MockChainSB struct {
	ctrl     *gomock.Controller
	recorder *MockChainSBMockRecorder
}

// MockChainSBMockRecorder is the mock recorder for MockChainSB.
type MockChainSBMockRecorder struct {
	mock *MockChainSB
}

// NewMockChainSB creates a new mock instance.
func NewMockChainSB(ctrl *gomock.Controller) *MockChainSB {
	mock := &MockChainSB{ctrl: ctrl}
	mock.recorder = &MockChainSBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainSB) EXPECT() *MockChainSBMockRecorder {
	return m.recorder
}

// ScrollNetworkChainLinkEvmJSONRPC mocks base method.
func (m *MockChainSB) ScrollNetworkChainLinkEvmJSONRPC(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrollNetworkChainLinkEvmJSONRPC", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrollNetworkChainLinkEvmJSONRPC indicates an expected call of ScrollNetworkChainLinkEvmJSONRPC.
func (mr *MockChainSBMockRecorder) ScrollNetworkChainLinkEvmJSONRPC(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrollNetworkChainLinkEvmJSONRPC", reflect.TypeOf((*MockChainSB)(nil).ScrollNetworkChainLinkEvmJSONRPC), ctx)
}

// SetupScrollNetworkChainID mocks base method.
func (m *MockChainSB) SetupScrollNetworkChainID(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupScrollNetworkChainID", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupScrollNetworkChainID indicates an expected call of SetupScrollNetworkChainID.
func (mr *MockChainSBMockRecorder) SetupScrollNetworkChainID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupScrollNetworkChainID", reflect.TypeOf((*MockChainSB)(nil).SetupScrollNetworkChainID), ctx)
}
