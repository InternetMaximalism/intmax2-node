{
  "swagger": "2.0",
  "info": {
    "title": "INTMAX2 Node",
    "description": "### Definitions\nThe INTMAX2 node service.\n",
    "version": "SWAGGER_VERSION"
  },
  "tags": [
    {
      "name": "BlockBuilderService"
    },
    {
      "name": "InfoService"
    },
    {
      "name": "WithdrawalService"
    }
  ],
  "host": "SWAGGER_HOST_URL",
  "basePath": "SWAGGER_BASE_PATH",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1": {
      "get": {
        "summary": "HealthCheck returns the health check block builder info",
        "description": "## HealthCheck returns the health check block builder info",
        "operationId": "BlockBuilderService_HealthCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HealthCheckResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "tags": [
          "BlockBuilderService"
        ]
      }
    },
    "/v1/block/proposed": {
      "post": {
        "summary": "BlockProposed returns the info about requests and retrieves the Merkle proof of a block containing the user's transaction, if available",
        "description": "## BlockProposed returns the info about requests and retrieves the Merkle proof of a block containing the user's transaction, if available",
        "operationId": "BlockBuilderService_BlockProposed",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockProposedResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not found error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BlockProposedRequest"
            }
          }
        ],
        "tags": [
          "BlockBuilderService"
        ]
      }
    },
    "/v1/block/signature": {
      "post": {
        "summary": "BlockSignature returns the info about sends the signature to approve the proposed block by signing the tx tree root",
        "description": "## BlockSignature returns the info about sends the signature to approve the proposed block by signing the tx tree root",
        "operationId": "BlockBuilderService_BlockSignature",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockSignatureResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BlockSignatureRequest"
            }
          }
        ],
        "tags": [
          "BlockBuilderService"
        ]
      }
    },
    "/v1/info": {
      "get": {
        "summary": "Info returns the info about retrieves the block builder's Scroll address, transaction fee, and difficulty",
        "description": "## Info returns the info about retrieves the block builder's Scroll address, transaction fee, and difficulty",
        "operationId": "BlockBuilderService_Info",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1InfoResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "tags": [
          "BlockBuilderService"
        ]
      }
    },
    "/v1/transaction": {
      "post": {
        "summary": "Transaction returns the info about create new transaction",
        "description": "## Transaction returns the info about create new transaction",
        "operationId": "BlockBuilderService_Transaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TransactionResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TransactionRequest"
            }
          }
        ],
        "tags": [
          "BlockBuilderService"
        ]
      }
    },
    "/v1/version": {
      "get": {
        "summary": "Version returns the build service info",
        "description": "## Version returns the build service info",
        "operationId": "InfoService_Version",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VersionResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "tags": [
          "InfoService"
        ]
      }
    },
    "/v1/withdrawals/find-by-hashes": {
      "post": {
        "summary": "WithdrawalsByHashes retrieves withdrawal records by their transfer hashes",
        "description": "## WithdrawalsByHashes retrieves withdrawal records by their transfer hashes",
        "operationId": "WithdrawalService_WithdrawalsByHashes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WithdrawalsByHashesResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1WithdrawalsByHashesRequest"
            }
          }
        ],
        "tags": [
          "WithdrawalService"
        ]
      }
    },
    "/v1/withdrawals/request": {
      "post": {
        "summary": "WithdrawalRequest processes a request for withdrawal",
        "description": "## WithdrawalRequest processes a request for withdrawal",
        "operationId": "WithdrawalService_WithdrawalRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WithdrawalRequestResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1WithdrawalRequestRequest"
            }
          }
        ],
        "tags": [
          "WithdrawalService"
        ]
      }
    }
  },
  "definitions": {
    "WithdrawalRequestResponseData": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "the message with additional details"
        }
      },
      "title": "Data contains additional information in the response"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v1AddressType": {
      "type": "string",
      "enum": [
        "EMPTY",
        "INTMAX",
        "ETHEREUM"
      ],
      "default": "EMPTY",
      "description": "- EMPTY: the EMPTY address type\n - INTMAX: the INTMAX address type\n - ETHEREUM: the ETHEREUM address type",
      "title": "AddressType describes type of address"
    },
    "v1BlockProposedRequest": {
      "type": "object",
      "properties": {
        "sender": {
          "type": "string",
          "title": "the sender's INTMAX address"
        },
        "txHash": {
          "type": "string",
          "title": "the hash of the user's transaction"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "title": "the expiration of request"
        },
        "signature": {
          "type": "string",
          "title": "the signature of request (the hash calculated from txHash, sender, and expiration)"
        }
      },
      "title": "BlockProposedRequest describes request about retrieves the Merkle proof of a block containing the user's transaction, if available"
    },
    "v1BlockProposedResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1DataBlockProposedResponse",
          "title": "the info about the request's result"
        }
      },
      "title": "BlockProposedResponse describes response about retrieves the Merkle proof of a block containing the user's transaction, if available"
    },
    "v1BlockSignatureRequest": {
      "type": "object",
      "properties": {
        "txRoot": {
          "type": "string",
          "title": "the transaction tree root hash"
        },
        "signature": {
          "type": "string",
          "title": "the user's signature"
        },
        "enoughBalanceProof": {
          "type": "string",
          "title": "the proof of sufficient balance after sending"
        }
      },
      "title": "BlockSignatureRequest describes request about sends the signature to approve the proposed block by signing the tx tree root"
    },
    "v1BlockSignatureResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1DataBlockSignatureResponse",
          "title": "the info about the request's result"
        }
      },
      "title": "BlockSignatureResponse describes response about sends the signature to approve the proposed block by signing the tx tree root"
    },
    "v1DataBlockProposedResponse": {
      "type": "object",
      "properties": {
        "txRoot": {
          "type": "string",
          "title": "the transaction tree root hash"
        },
        "txTreeMerkleProof": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the Merkle proof from the tx tree for the specified tx_hash"
        }
      },
      "title": "DataBlockProposedResponse describes the data of response about retrieves the Merkle proof of a block containing the user's transaction, if available"
    },
    "v1DataBlockSignatureResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "the message about result of request"
        }
      },
      "title": "DataBlockSignatureResponse describes the data of response about sends the signature to approve the proposed block by signing the tx tree root"
    },
    "v1DataTransactionResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "the message about result of request"
        }
      },
      "title": "DataTransactionResponse describes the data of response to get info about the create new transaction"
    },
    "v1EnoughBalanceProof": {
      "type": "object",
      "properties": {
        "proof": {
          "type": "string",
          "title": "the proof string"
        },
        "publicInputs": {
          "type": "string",
          "title": "the public inputs for the proof"
        }
      },
      "title": "EnoughBalanceProof contains the proof for enough balance"
    },
    "v1HealthCheckResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        }
      },
      "title": "HealthCheckResponse describes response to get info about the health check block builder"
    },
    "v1InfoResponse": {
      "type": "object",
      "properties": {
        "scrollAddress": {
          "type": "string",
          "title": "the block builder's Scroll address"
        },
        "transferFee": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "the mapping of token addresses in INTMAX to fees payable in those tokens"
        },
        "difficulty": {
          "type": "string",
          "title": "the PoW difficulty value"
        }
      },
      "title": "InfoResponse describes response about retrieves the block builder's Scroll address, transaction fee, and difficulty"
    },
    "v1RecipientTransferDataTransactionRequest": {
      "type": "object",
      "properties": {
        "addressType": {
          "$ref": "#/definitions/v1AddressType",
          "title": "the address type of recipient"
        },
        "address": {
          "type": "string",
          "title": "the address of recipient"
        }
      },
      "title": "RecipientTransferDataTransactionRequest describes recipient of request to get info about the create new transaction"
    },
    "v1Transaction": {
      "type": "object",
      "properties": {
        "transferTreeRoot": {
          "type": "string",
          "title": "the root of the transfer tree"
        },
        "nonce": {
          "type": "integer",
          "format": "int32",
          "title": "the nonce of the transaction"
        }
      },
      "title": "Transaction contains details about the transaction"
    },
    "v1TransactionRequest": {
      "type": "object",
      "properties": {
        "sender": {
          "type": "string",
          "title": "the sender's INTMAX address"
        },
        "transfersHash": {
          "type": "string",
          "title": "the Poseidon hash of transfer tree root and token index"
        },
        "nonce": {
          "type": "string",
          "format": "uint64",
          "title": "the number of transactions executed with this public key"
        },
        "powNonce": {
          "type": "string",
          "title": "the PoW nonce"
        },
        "transferData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TransferDataTransactionRequest"
          },
          "title": "the transfer data of the transaction"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "title": "the expiration of request"
        },
        "signature": {
          "type": "string",
          "title": "the signature of request (the hash calculated from transfersHash, nonce, powNonce, sender, and expiration)"
        }
      },
      "title": "TransactionRequest describes request to get info about the create new transaction"
    },
    "v1TransactionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1DataTransactionResponse",
          "title": "the info about the request's result"
        }
      },
      "title": "TransactionRequest describes response to get info about the create new transaction"
    },
    "v1TransferData": {
      "type": "object",
      "properties": {
        "recipient": {
          "type": "string",
          "title": "the recipient address"
        },
        "tokenIndex": {
          "type": "integer",
          "format": "int32",
          "title": "the token index"
        },
        "amount": {
          "type": "string",
          "title": "the amount of the transfer"
        },
        "salt": {
          "type": "string",
          "title": "the salt used in the transfer"
        }
      },
      "title": "TransferData contains details about the transfer"
    },
    "v1TransferDataTransactionRequest": {
      "type": "object",
      "properties": {
        "recipient": {
          "$ref": "#/definitions/v1RecipientTransferDataTransactionRequest",
          "title": "the recipient info"
        },
        "tokenIndex": {
          "type": "string",
          "title": "the token index value"
        },
        "amount": {
          "type": "string",
          "title": "the amount value"
        },
        "salt": {
          "type": "string",
          "title": "the salt value"
        }
      },
      "title": "TransferDataTransactionRequest describes the data of transaction"
    },
    "v1TransferMerkleProof": {
      "type": "object",
      "properties": {
        "siblings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the list of sibling hashes in the Merkle tree"
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "title": "the index in the Merkle tree"
        }
      },
      "title": "TransferMerkleProof contains the Merkle proof for the transfer"
    },
    "v1TxMerkleProof": {
      "type": "object",
      "properties": {
        "siblings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the list of sibling hashes in the Merkle tree"
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "title": "the index in the Merkle tree"
        }
      },
      "title": "TxMerkleProof contains the Merkle proof for the transaction"
    },
    "v1VersionResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "the service version"
        },
        "buildtime": {
          "type": "string",
          "title": "the service build time"
        }
      },
      "title": "VersionResponse describes response to get info about the build version info and build time"
    },
    "v1Withdrawal": {
      "type": "object",
      "properties": {
        "transferData": {
          "$ref": "#/definitions/v1TransferData",
          "title": "the transfer data"
        },
        "transaction": {
          "$ref": "#/definitions/v1Transaction",
          "title": "the transaction data"
        },
        "transferHash": {
          "type": "string",
          "title": "the transfer hash"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64",
          "title": "the block number"
        },
        "blockHash": {
          "type": "string",
          "title": "the block hash"
        },
        "status": {
          "type": "string",
          "description": "the status of the withdrawal (e.g., pending, success, failed)."
        }
      },
      "title": "Withdrawal represents the withdrawal data"
    },
    "v1WithdrawalRequestRequest": {
      "type": "object",
      "properties": {
        "transferData": {
          "$ref": "#/definitions/v1TransferData",
          "title": "the transfer data"
        },
        "transferMerkleProof": {
          "$ref": "#/definitions/v1TransferMerkleProof",
          "title": "the transfer Merkle proof"
        },
        "transaction": {
          "$ref": "#/definitions/v1Transaction",
          "title": "the transaction data"
        },
        "txMerkleProof": {
          "$ref": "#/definitions/v1TxMerkleProof",
          "title": "the transaction Merkle proof"
        },
        "transferHash": {
          "type": "string",
          "title": "the transfer hash"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64",
          "title": "the block number"
        },
        "blockHash": {
          "type": "string",
          "title": "the block hash"
        },
        "enoughBalanceProof": {
          "$ref": "#/definitions/v1EnoughBalanceProof",
          "title": "the proof of enough balance"
        }
      },
      "title": "WithdrawalProofRequest describes the request for a withdrawal proof"
    },
    "v1WithdrawalRequestResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "indicates if the request was successful"
        },
        "data": {
          "$ref": "#/definitions/WithdrawalRequestResponseData",
          "title": "contains additional data about the response"
        }
      },
      "title": "WithdrawalRequestResponse describes the response for a withdrawal request"
    },
    "v1WithdrawalsByHashesRequest": {
      "type": "object",
      "properties": {
        "transferHashes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "WithdrawalsByHashesRequest is the request message for WithdrawalsByHashes"
    },
    "v1WithdrawalsByHashesResponse": {
      "type": "object",
      "properties": {
        "withdrawals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Withdrawal"
          },
          "description": "A list of Withdrawal messages that match the provided transfer hashes."
        }
      },
      "title": "WithdrawalsByHashesResponse is the response message for WithdrawalsByHashes"
    }
  }
}
