{
  "swagger": "2.0",
  "info": {
    "title": "INTMAX2 Block Validity Prover",
    "description": "### Definitions\nThe INTMAX2 block validity prover service.\n",
    "version": "SWAGGER_VERSION"
  },
  "tags": [
    {
      "name": "InfoService"
    },
    {
      "name": "BlockValidityProverService"
    }
  ],
  "host": "SWAGGER_HOST_URL",
  "basePath": "SWAGGER_BASE_PATH",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/account/{address}": {
      "get": {
        "summary": "Account returns info of account ID by sender INTMAX address",
        "description": "## Account returns info of account ID by sender INTMAX address",
        "operationId": "BlockValidityProverService_Account",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AccountResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "the INTMAX address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BlockValidityProverService"
        ]
      }
    },
    "/v1/balance-update-witness": {
      "post": {
        "summary": "BalanceUpdateWitness returns info of data to update balance proof to specified block number",
        "description": "## BalanceUpdateWitness returns info of data to update balance proof to specified block number",
        "operationId": "BlockValidityProverService_BalanceUpdateWitness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BalanceUpdateWitnessResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BalanceUpdateWitnessRequest"
            }
          }
        ],
        "tags": [
          "BlockValidityProverService"
        ]
      }
    },
    "/v1/block-hash/{blockHash}/status": {
      "get": {
        "summary": "BlockHashStatus returns status by the block hash",
        "description": "## BlockHashStatus returns status by the block hash",
        "operationId": "BlockValidityProverService_BlockHashStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockHashStatusResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not found error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHash",
            "description": "the hash of block",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BlockValidityProverService"
        ]
      }
    },
    "/v1/block-merkle-tree/{rootBlockNumber}/{leafBlockNumber}": {
      "get": {
        "summary": "BlockTreeProof returns the block Merkle proof",
        "description": "## BlockTreeProof returns the block Merkle proof",
        "operationId": "BlockValidityProverService_BlockTreeProof",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockTreeProofResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "rootBlockNumber",
            "description": "the root block number of the block Merkle proof",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "leafBlockNumber",
            "description": "the leaf block number of the block Merkle proof",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BlockValidityProverService"
        ]
      }
    },
    "/v1/block-number/{blockNumber}/status": {
      "get": {
        "summary": "BlockNumberStatus returns status by the block number",
        "description": "## BlockNumberStatus returns status by the block number",
        "operationId": "BlockValidityProverService_BlockNumberStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockNumberStatusResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not found error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "blockNumber",
            "description": "the number of block",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "BlockValidityProverService"
        ]
      }
    },
    "/v1/block-validity-proof/{blockNumber}": {
      "get": {
        "summary": "BlockValidityProof returns info of data with block validity proof",
        "description": "## BlockValidityPublicInputs returns info of data with block validity proof",
        "operationId": "BlockValidityProverService_BlockValidityProof",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockValidityProofResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "blockNumber",
            "description": "the target block number",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "BlockValidityProverService"
        ]
      }
    },
    "/v1/block-validity-public-inputs/{blockNumber}": {
      "get": {
        "summary": "BlockValidityPublicInputs returns info of data with block validity public inputs",
        "description": "## BlockValidityPublicInputs returns info of data with block validity public inputs",
        "operationId": "BlockValidityProverService_BlockValidityPublicInputs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockValidityPublicInputsResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "blockNumber",
            "description": "the target block number",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "BlockValidityProverService"
        ]
      }
    },
    "/v1/deposit-tree-proof/{depositIndex}": {
      "get": {
        "summary": "DepositTreeProof returns the deposit Merkle proof",
        "description": "## DepositTreeProof returns the deposit Merkle proof",
        "operationId": "BlockValidityProverService_DepositTreeProof",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DepositTreeProofResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Not found error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "depositIndex",
            "description": "the deposit index of deposit",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "blockNumber",
            "description": "the block number of deposit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BlockValidityProverService"
        ]
      }
    },
    "/v1/deposits": {
      "post": {
        "summary": "Deposits returns info of data with deposit information from the deposit hash",
        "description": "## Deposits returns info of data with deposit information from the deposit hash",
        "operationId": "BlockValidityProverService_Deposits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DepositsResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DepositsRequest"
            }
          }
        ],
        "tags": [
          "BlockValidityProverService"
        ]
      }
    },
    "/v1/info": {
      "get": {
        "summary": "BlockValidityProverInfo returns info of the block validity prover",
        "description": "## BlockValidityProverInfo returns info of the block validity prover",
        "operationId": "BlockValidityProverService_BlockValidityProverInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockValidityProverInfoResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "tags": [
          "BlockValidityProverService"
        ]
      }
    },
    "/v1/version": {
      "get": {
        "summary": "Version returns the build service info",
        "description": "## Version returns the build service info",
        "operationId": "InfoService_Version",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VersionResponse"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "tags": [
          "InfoService"
        ]
      }
    }
  },
  "definitions": {
    "BalanceUpdateWitnessResponseAccountMembershipProof": {
      "type": "object",
      "properties": {
        "isIncluded": {
          "type": "boolean",
          "title": "indicates if the account is included in the tree"
        },
        "leafProof": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the siblings of account Merkle proof"
        },
        "leaf": {
          "$ref": "#/definitions/BalanceUpdateWitnessResponseLeaf",
          "title": "the leaf data"
        }
      },
      "title": "Proof of account membership"
    },
    "BalanceUpdateWitnessResponseLeaf": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "the key of the leaf"
        },
        "value": {
          "type": "integer",
          "format": "int64",
          "title": "the value associated with the leaf"
        },
        "nextIndex": {
          "type": "integer",
          "format": "int64",
          "title": "the index of the next leaf"
        },
        "nextKey": {
          "type": "string",
          "title": "the key of the next leaf"
        }
      },
      "title": "Leaf data"
    },
    "DataDeposit": {
      "type": "object",
      "properties": {
        "depositHash": {
          "type": "string",
          "title": "the deposit hash requested"
        },
        "depositId": {
          "type": "integer",
          "format": "int64",
          "title": "the deposit ID of the deposit"
        },
        "depositIndex": {
          "type": "integer",
          "format": "int64",
          "title": "the index of the deposit in the deposit tree"
        },
        "blockNumber": {
          "type": "integer",
          "format": "int64",
          "title": "the block number when this deposit was included"
        },
        "isSynchronized": {
          "type": "boolean",
          "title": "the boolean indicating whether this deposit has been synchronized"
        },
        "from": {
          "type": "string",
          "title": "the ethereum address executing the deposit method of Liquidity contract"
        },
        "depositLeaf": {
          "$ref": "#/definitions/DataDepositLeaf",
          "title": "the object containing details of the deposit"
        }
      },
      "title": "the deposit information"
    },
    "DataDepositLeaf": {
      "type": "object",
      "properties": {
        "recipientSaltHash": {
          "type": "string",
          "title": "the hash of the recipient's address and salt"
        },
        "tokenIndex": {
          "type": "integer",
          "format": "int64",
          "title": "the index of the token being deposited"
        },
        "amount": {
          "type": "string",
          "title": "the amount of tokens deposited"
        }
      },
      "title": "the object containing details of the deposit"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v1AccountResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1AccountResponseData",
          "title": "Additional data related to the response"
        }
      },
      "title": "AccountResponse describes response to get info about the account ID by sender INTMAX address"
    },
    "v1AccountResponseData": {
      "type": "object",
      "properties": {
        "isRegistered": {
          "type": "boolean",
          "title": "the indication if the address is registered or not"
        },
        "accountId": {
          "type": "integer",
          "format": "int64",
          "title": "the account ID. If isRegistered is false, accountId is always zero"
        }
      },
      "title": "Data is the nested message containing detailed response information"
    },
    "v1BalanceUpdateWitnessRequest": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "title": "the INTMAX address"
        },
        "currentBlockNumber": {
          "type": "integer",
          "format": "int64",
          "title": "the block number of the current balance proof"
        },
        "targetBlockNumber": {
          "type": "integer",
          "format": "int64",
          "title": "the block number to which the balance proof should be updated"
        },
        "isPrevAccountTree": {
          "type": "boolean",
          "title": "indicates whether to use the previous account tree"
        }
      },
      "title": "BalanceUpdateWitnessRequest describes request to get info about the data to update balance proof to specified block number"
    },
    "v1BalanceUpdateWitnessResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1BalanceUpdateWitnessResponseData",
          "title": "Additional data related to the response"
        }
      },
      "title": "BalanceUpdateWitnessResponse describes response to get info about the data to update balance proof to specified block number"
    },
    "v1BalanceUpdateWitnessResponseData": {
      "type": "object",
      "properties": {
        "isPrevAccountTree": {
          "type": "boolean",
          "title": "indicates whether to use the previous account tree"
        },
        "validityProof": {
          "type": "string",
          "title": "the base64-encoded validity proof data"
        },
        "blockMerkleProof": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the siblings of the block Merkle proof"
        },
        "accountMembershipProof": {
          "$ref": "#/definitions/BalanceUpdateWitnessResponseAccountMembershipProof",
          "title": "the proof of account membership"
        }
      },
      "title": "Data is the nested message containing detailed response information"
    },
    "v1BlockHashStatusResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1BlockHashStatusResponseData",
          "title": "Additional data related to the response"
        }
      },
      "title": "BlockHashStatusResponse describes response to get status by the block hash"
    },
    "v1BlockHashStatusResponseData": {
      "type": "object",
      "properties": {
        "blockNumber": {
          "type": "integer",
          "format": "int64",
          "title": "the INTMAX Block number"
        },
        "blockHash": {
          "type": "string",
          "title": "the INTMAX Block hash"
        },
        "status": {
          "$ref": "#/definitions/v1BlockStatus",
          "title": "the status of block"
        },
        "executedBlockHashOnScroll": {
          "type": "string",
          "title": "the block hash posted on Scroll"
        },
        "executedBlockHashOnEthereum": {
          "type": "string",
          "title": "the block hash of the Scroll block posted on Ethereum"
        }
      },
      "title": "Data is the nested message containing detailed response information"
    },
    "v1BlockNumberStatusResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1BlockNumberStatusResponseData",
          "title": "Additional data related to the response"
        }
      },
      "title": "BlockNumberStatusResponse describes response to get status by the block number"
    },
    "v1BlockNumberStatusResponseData": {
      "type": "object",
      "properties": {
        "blockNumber": {
          "type": "integer",
          "format": "int64",
          "title": "the INTMAX Block number"
        },
        "blockHash": {
          "type": "string",
          "title": "the INTMAX Block hash"
        },
        "status": {
          "$ref": "#/definitions/v1BlockStatus",
          "title": "the status of block"
        },
        "executedBlockHashOnScroll": {
          "type": "string",
          "title": "the block hash posted on Scroll"
        },
        "executedBlockHashOnEthereum": {
          "type": "string",
          "title": "the block hash of the Scroll block posted on Ethereum"
        }
      },
      "title": "Data is the nested message containing detailed response information"
    },
    "v1BlockStatus": {
      "type": "string",
      "enum": [
        "EXECUTED_ON_SCROLL",
        "EXECUTED_ON_ETHEREUM"
      ],
      "default": "EXECUTED_ON_SCROLL",
      "title": "- EXECUTED_ON_SCROLL: the block hash has been posted on Scroll but not reflected on Ethereum\n - EXECUTED_ON_ETHEREUM: the Scroll block that incorporated the INTMAX block has been reflected on Ethereum"
    },
    "v1BlockTreeProofResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1BlockTreeProofResponseData",
          "title": "Additional data related to the response"
        }
      },
      "title": "BlockTreeProofResponse describes response to get info about the block Merkle proof"
    },
    "v1BlockTreeProofResponseData": {
      "type": "object",
      "properties": {
        "merkleProof": {
          "$ref": "#/definitions/v1BlockTreeProofResponseMerkleProof",
          "title": "the merkle proof of block"
        },
        "rootHash": {
          "type": "string",
          "title": "the root hash of block"
        }
      },
      "title": "Data is the nested message containing detailed response information"
    },
    "v1BlockTreeProofResponseMerkleProof": {
      "type": "object",
      "properties": {
        "siblings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the siblings of the block merkle proof"
        }
      },
      "title": "MerkleProof is the block merkle proof"
    },
    "v1BlockValidityProofResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1BlockValidityProofResponseData",
          "title": "Additional data related to the response"
        }
      },
      "title": "BlockValidityProofResponse describes response to get info about the data with block validity proof"
    },
    "v1BlockValidityProofResponseData": {
      "type": "object",
      "properties": {
        "validityPublicInputs": {
          "$ref": "#/definitions/v1BlockValidityProofResponseDataValidityPublicInputs",
          "title": "the object contains details about the public inputs for block validity verification"
        },
        "validityProof": {
          "type": "string",
          "title": "the Plonky2 proof encoded in base64 including public inputs"
        },
        "senders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockValidityProofResponseDataSender"
          },
          "title": "the object contains information about each sender in the block, including their address and validity status"
        }
      },
      "title": "Data is the nested message containing detailed response information"
    },
    "v1BlockValidityProofResponseDataPublicState": {
      "type": "object",
      "properties": {
        "blockTreeRoot": {
          "type": "string",
          "title": "the merkle root of the block tree"
        },
        "prevAccountTreeRoot": {
          "type": "string",
          "title": "the merkle root of the previous account state tree"
        },
        "accountTreeRoot": {
          "type": "string",
          "title": "the merkle root of the current account state tree"
        },
        "depositTreeRoot": {
          "type": "string",
          "title": "the merkle root of the deposit tree"
        },
        "blockHash": {
          "type": "string",
          "title": "the hash of the current block"
        },
        "blockNumber": {
          "type": "integer",
          "format": "int64",
          "title": "the number of the current block"
        }
      },
      "title": "PublicState return object includes various root hashes and block information"
    },
    "v1BlockValidityProofResponseDataSender": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "title": "the INTMAX address of the sender"
        },
        "isValid": {
          "type": "boolean",
          "title": "the boolean indicating if the sender's transaction is valid (the sender signed the tx root and the balance is non-negative)"
        }
      },
      "title": "Sender returns object contains information about sender in the block, including address and validity status"
    },
    "v1BlockValidityProofResponseDataValidityPublicInputs": {
      "type": "object",
      "properties": {
        "publicState": {
          "$ref": "#/definitions/v1BlockValidityProofResponseDataPublicState",
          "title": "the object includes various root hashes and block information"
        },
        "txTreeRoot": {
          "type": "string",
          "title": "the merkle root of the transaction tree"
        },
        "senderTreeRoot": {
          "type": "string",
          "title": "the merkle root of the sender tree"
        },
        "isValidBlock": {
          "type": "boolean",
          "title": "the boolean indicating if the block is valid"
        }
      },
      "title": "ValidityPublicInputs returns object contains details about the public inputs for block validity verification"
    },
    "v1BlockValidityProverInfoResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1BlockValidityProverInfoResponseData",
          "title": "Additional data related to the response"
        }
      },
      "title": "BlockValidityProverInfoResponse describes response to get info about the block validity prover"
    },
    "v1BlockValidityProverInfoResponseData": {
      "type": "object",
      "properties": {
        "depositIndex": {
          "type": "string",
          "format": "int64",
          "title": "the last synchronized deposit index of the block validity prover"
        },
        "blockNumber": {
          "type": "string",
          "format": "int64",
          "title": "the latest block number for which block validity proof has been created"
        }
      },
      "title": "Data is the nested message containing detailed response information"
    },
    "v1BlockValidityPublicInputsResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1BlockValidityPublicInputsResponseData",
          "title": "Additional data related to the response"
        }
      },
      "title": "BlockValidityPublicInputsResponse describes response to get info about the data with block validity public inputs"
    },
    "v1BlockValidityPublicInputsResponseData": {
      "type": "object",
      "properties": {
        "validityPublicInputs": {
          "$ref": "#/definitions/v1BlockValidityPublicInputsResponseDataValidityPublicInputs",
          "title": "the object contains details about the public inputs for block validity verification"
        },
        "senders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockValidityPublicInputsResponseDataSender"
          },
          "title": "the object contains information about each sender in the block, including their address and validity status"
        }
      },
      "title": "Data is the nested message containing detailed response information"
    },
    "v1BlockValidityPublicInputsResponseDataPublicState": {
      "type": "object",
      "properties": {
        "blockTreeRoot": {
          "type": "string",
          "title": "the merkle root of the block tree"
        },
        "prevAccountTreeRoot": {
          "type": "string",
          "title": "the merkle root of the previous account state tree"
        },
        "accountTreeRoot": {
          "type": "string",
          "title": "the merkle root of the current account state tree"
        },
        "depositTreeRoot": {
          "type": "string",
          "title": "the merkle root of the deposit tree"
        },
        "blockHash": {
          "type": "string",
          "title": "the hash of the current block"
        },
        "blockNumber": {
          "type": "integer",
          "format": "int64",
          "title": "the number of the current block"
        }
      },
      "title": "PublicState return object includes various root hashes and block information"
    },
    "v1BlockValidityPublicInputsResponseDataSender": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "title": "the INTMAX address of the sender"
        },
        "isValid": {
          "type": "boolean",
          "title": "the boolean indicating if the sender's transaction is valid (the sender signed the tx root and the balance is non-negative)"
        }
      },
      "title": "Sender returns object contains information about sender in the block, including address and validity status"
    },
    "v1BlockValidityPublicInputsResponseDataValidityPublicInputs": {
      "type": "object",
      "properties": {
        "publicState": {
          "$ref": "#/definitions/v1BlockValidityPublicInputsResponseDataPublicState",
          "title": "the object includes various root hashes and block information"
        },
        "txTreeRoot": {
          "type": "string",
          "title": "the merkle root of the transaction tree"
        },
        "senderTreeRoot": {
          "type": "string",
          "title": "the merkle root of the sender tree"
        },
        "isValidBlock": {
          "type": "boolean",
          "title": "the boolean indicating if the block is valid"
        }
      },
      "title": "ValidityPublicInputs returns object contains details about the public inputs for block validity verification"
    },
    "v1DepositTreeProofResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1DepositTreeProofResponseData",
          "title": "Additional data related to the response"
        }
      },
      "title": "DepositTreeProofResponse describes response to get info about the deposit Merkle proof"
    },
    "v1DepositTreeProofResponseData": {
      "type": "object",
      "properties": {
        "merkleProof": {
          "$ref": "#/definitions/v1DepositTreeProofResponseMerkleProof",
          "title": "the merkle proof of deposit"
        },
        "rootHash": {
          "type": "string",
          "title": "the root hash of deposit"
        }
      },
      "title": "Data is the nested message containing detailed response information"
    },
    "v1DepositTreeProofResponseMerkleProof": {
      "type": "object",
      "properties": {
        "siblings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the siblings of the deposit merkle proof"
        }
      },
      "title": "MerkleProof is the deposit merkle proof"
    },
    "v1DepositsRequest": {
      "type": "object",
      "properties": {
        "depositHashes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the root hash of tx tree"
        }
      },
      "title": "DepositsRequest describes request to get info about the data with deposit information from the deposit hash"
    },
    "v1DepositsResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "the success flag"
        },
        "data": {
          "$ref": "#/definitions/v1DepositsResponseData",
          "title": "Additional data related to the response"
        }
      },
      "title": "DepositsResponse describes response to get info about the data with deposit information from the deposit hash"
    },
    "v1DepositsResponseData": {
      "type": "object",
      "properties": {
        "deposits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DataDeposit"
          },
          "title": "the list of deposits"
        }
      },
      "title": "Data is the nested message containing detailed response information"
    },
    "v1VersionResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "the service version"
        },
        "buildtime": {
          "type": "string",
          "title": "the service build time"
        }
      },
      "title": "VersionResponse describes response to get info about the build version info and build time"
    }
  }
}
